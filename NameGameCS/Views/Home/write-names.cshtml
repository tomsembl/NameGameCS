@model NameGameCS.Models.WriteNamesViewModel

<body id="app" class="lobby2 flex-v rainbow-gradient-bg animate-rainbow"></body>
<script type="text/babel">
    function App(){
        var waiting_on_list;

        const con = new signalR.HubConnectionBuilder().withUrl("/SignalRHub").build();

        con.on("message", function (user, msg) {
            console.log(msg);
        });

        con.on('EmitAdvanceGame', function (user, msg) {
            console.log(user, msg);
            location.href = `/join_game/${@Model.Game.game_id}`;
        });

        con.on('EmitKickGroup', function (user, msg) {
            alert(msg);
            location.href = '/';
        });

        con.on('EmitWaitingOn', function (user, msg) {
            console.log(user,msg)
            waiting_on_list = JSON.parse(msg).map(x => x.username);
            document.getElementById('waiting-on').innerHTML = (waiting_on_list.length === 0) ? "Ready" : `Waiting on: &nbsp;${waiting_on_list.join(", &nbsp;")}`;
        });

        con.start().then(() => {
            console.log("Connected");
            con.send('EmitWaitingOn');
        }).catch(err => console.error('Error while establishing connection:', err));

        function submit_names() {
            const names = [];

            for (var i = 0; i < @Model.Game.number_names; i++) {
                const name_input = document.getElementById(`name_input${i}`);
                const random_button = document.getElementById(`button${i}`);
                const val = name_input.value;
                name_input.value = "submitted";
                random_button.setAttribute('disabled', '');
                name_input.setAttribute('disabled', '');
                if (val !== "") {
                    names.push({name:val});
                }
            }
            if (names.length !== 0) {
                fetch("/submit_names", {
                    method: "POST",
                    body: JSON.stringify(names),
                    headers: new Headers({ "content-type": "application/json" })
                }).then(response => {
                    console.log(response)
                    response.text().then(str => {
                        if (str.length > 0) { alert(str); }
                    });
                });
            } else {
                alert("no names to submit");
            }
        }

        function advance_game() {
            if (waiting_on_list.length > 0) {
                alert(`waiting on players: ${waiting_on_list.join(", ")}`);
                return;
            }
            fetch(`/advance_game?stage=${@Html.Raw((int)GameStage.pick_teams)}`, { method: "POST" });
        }

        function get_random_name(elem) {
            con.invoke("GetRandomDefaultName").then(answer => {
                console.log(answer)
                var input_id = elem.id.slice(6);
                document.getElementById(`name_input${input_id}`).value = answer;
            }).catch(err => console.error('Error invoking GetRandomDefaultName:', err));
        }

        const NameInputs = (
            <React.Fragment>
                {
                    Array.from({ length: @Model.Game.number_names }).map((_, i) => (
                        <div class="vmar-tiny flex-h" id={`name_div${i}`} key={i}>
                            <input class="name_input" type="text" id={`name_input${i}`} maxLength="40" />
                            <button class="button2 dice-button" id={`button${i}`} onClick={() => get_random_name(document.getElementById(`button${i}`))}>
                                <img class="dice" src="/media/dice.png" alt="dice" />
                            </button>
                        </div>
                    ))
                }
            </React.Fragment>
        )

        return (
            <React.Fragment>
                <h1 class="heading subheading3">WRITE @Html.Raw(Model.Game.number_names) NAMES</h1>
                <div class="flex-v form pad-10pct">
                    <div class="mar-b20">
                        <h1 class="heading subheading4">INSTRUCTIONS</h1>
                        <p class="option small-option instructions slight-v-gradient">Write names that at least a few players will know.</p>
                        <p class="option small-option instructions slight-v-gradient">Eg. celebrities, fictional characters, et cetera.</p>
                        <p class="option small-option instructions slight-v-gradient">Players will need to read and describe them.</p>
                        <p class="option small-option instructions slight-v-gradient">Use the random generator if you're struggling.</p>
                    </div>
                    {NameInputs}
                </div>
                <br />
                <h1 id="waiting-on" class="heading subheading4">Waiting on: &nbsp;</h1>

                <div class="flex-h mar-1em">
                    <button class="button1 button3" onClick={submit_names} id="submit">Submit</button>
                    <button class="button1 button3" onClick={advance_game} id="start_game">Start Game</button>
                </div>
                <div class="flex-h mar-1em">
                    <button class="button2" onClick={() => { location.href = '/'; }}>Home</button>
                </div>
            </React.Fragment>
        )
    }
    ReactDOM.render(<App />, document.querySelector("#app"));
</script>
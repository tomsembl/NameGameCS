@model NameGameCS.Models.LobbyViewModel

<body id="app" class="lobby2 flex-v rainbow-gradient-bg animate-rainbow">   
</body>

<script type="text/babel">
    function App() {
        const [gameDeets, setGameDeets] = React.useState(@Html.Raw(Json.Serialize(Model.Game)))
        const [state, setState] = React.useState({
            userID: @Html.Raw(Model.User.user_id),
            gameID: @Html.Raw(Model.Game.game_id),
            players: @Html.Raw(Json.Serialize(Model.Players)),
            userInstID: @Html.Raw(Model.UserInstance.user_inst_id),
            selectedPlayerID: null,
            selectedTeamID: null,
            username: @Html.Raw('"' + Model.User.username + '"'),
        })

        const con = React.useRef()

        React.useEffect(()=>{
            const newCon = new signalR.HubConnectionBuilder().withUrl("/SignalRHub").build();

            newCon.on("message", function (user, msg) {
                console.log(msg)
            });

            newCon.on('EmitPlayers', function (user, msg)  {
                setState(prevState=>({
                    ...prevState,
                    players: JSON.parse(msg),
                }))
            })

            newCon.on('EmitAdvanceGame', function (user, msg) {
                location.href=`/join_game/${state.gameID}`;
            })

            newCon.on('EmitKickGroup', function (user , msg){
                alert(msg)
                location.href='/';
            })

            newCon.onclose(() => {
                console.log("Connection lost. Attempting to reconnect...");
                startConnection();
            });

            const startConnection = () => {
                newCon.start().then(() => {
                    console.log("Connected");
                }).catch(err => {
                    console.error('Error while establishing connection:', err);
                    setTimeout(startConnection, 5000); // Retry after 5 seconds
                });
            };

            con.current = newCon;
            startConnection();

            return () => {
                if (con.current) {
                    con.current.stop().then(() => console.log("Connection stopped."));
                }
            };
        },[])


        function username_change(newUsername){
            if (!newUsername) { 
                newUsername = state.username
            } else {
                fetch(`/username_change?newUsername=${encodeURIComponent(newUsername)}`, { method:"POST" })
            }
        }

        function kick() {
            if (state.selectedPlayerID === null){
                alert("select a player")
                return
            }
            const prompt = confirm("Are you sure you want to kick the selected player from the game?")
            if (prompt) { 
                fetch(`/kick_user?user_id=${state.selectedPlayerID}`, { method:"POST" }) 
            }
        }

        function advance_game(){
            fetch(`/advance_game?stage=${@Html.Raw((int)GameStage.write_names)}`,{ method:"POST" })
        }

        function onPlayerChange(e) {
            setState(prevState=>{
                if (e.target.localName == 'button') {username_change(prevState.username);return prevState}
                username_change(e.target.value)
                return {
                    ...prevState,
                    username: e.target.value,
                }
            })
        }

        const EditPlayerName = (
            <div class="flex-h center vmar">
                <h1 class="heading subheading4 pad-05em">
                    Edit Player Name
                    <div class="flex-h-start mt1">
                        <input class="lobby-text-input" type="text" id="username_change" value={state.username} maxlength="16" onChange={onPlayerChange}/>
                        <button class="button2 tick-button" id="username_change_button" onClick={onPlayerChange}>
                            ✓
                        </button>
                    </div>
                </h1>
            </div>
        )

        const GameDetails = (
            <div class="flex-v-start vw40 game-details">
                <h1 class="heading subheading4">Game Details</h1>
                <table class="">
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Name: </strong></td>
                        <td class="td-right"><p id="game_name">{gameDeets.game_name}&nbsp;</p></td>
                    </tr>
                </table>
                <table class="">
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Num of Teams:</strong></td>
                        <td class="td-left"><p id="details_teams">{gameDeets.number_teams}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Num of Names:</strong></td>
                        <td class="td-left"><p id="details_num_names">{gameDeets.number_names}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Time Limit (s):</strong></td>
                        <td class="td-left"><p id="details_time_limit">{gameDeets.time_limit_sec}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Round1:</strong></td>
                        <td class="td-left"><p id="details_round1">{gameDeets.round1?"✓":"✗"}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Round2:</strong></td>
                        <td class="td-left"><p id="details_round2">{gameDeets.round2?"✓":"✗"}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Round3:</strong></td>
                        <td class="td-left"><p id="details_round3">{gameDeets.round3?"✓":"✗"}</p></td>
                    </tr>
                    <tr class="table-row slight-v-gradient">
                        <td class="td-left"><strong>Round4:</strong></td>
                        <td class="td-left"><p id="details_round4">{gameDeets.round4?"✓":"✗"}</p></td>
                    </tr>
                </table>
            </div>
        )

        const Players = (
            <div class="flex-v-start vw40">
                <h1 class="heading subheading4">Players</h1>
                <div class="text-box" id="players">
                    {Object.keys(state.players).map((playerID) => {
                        playerID = parseInt(playerID)
                        return(
                            <div class={`option small-option slight-v-gradient ${state.selectedPlayerID===playerID?'selected':''}`} id={`player-option${playerID}`} onClick={()=>{setState(prevState=>({
                                    ...prevState,
                                    selectedPlayerID: prevState.selectedPlayerID===playerID? null : playerID , //clear the selection on the second click
                                }))
                            }}>
                                {state.players[playerID]}
                            </div>
                        )
                    })}
                </div>
                <h1 class="heading subheading4 pad-05em">
                    <div class="flex-h">

                        <button class="button2" onClick={kick}>Kick</button>
                    </div>
                </h1>
            </div>
        )

        const BottomButtons = (
            <div class="flex-h vmar">
                <button class="button1 button3" onClick={advance_game} id="start_game">Start Game</button>
                <button class="button1 button3" onClick={()=>{location.href='/'}}>Home</button>
            </div>
        )

        return (
            <React.Fragment>
                <h1 class="heading subheading3">LOBBY</h1>
                {EditPlayerName}
                <div class="flex-h vmar">
                    {GameDetails}
                    {Players}
                </div>
                {BottomButtons}
            </React.Fragment>
        )
    }
    ReactDOM.render(<App />, document.querySelector("#app"));
</script>
        